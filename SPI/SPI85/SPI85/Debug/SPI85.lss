
SPI85.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000008b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000560  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001e7  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000342  00000000  00000000  00001077  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000058  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000015f  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000099  00000000  00000000  00001573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e2 e0       	ldi	r30, 0x02	; 2
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <__CCP__+0x6>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__CCP__+0x2>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 36       	cpi	r26, 0x60	; 96
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	55 c0       	rjmp	.+170    	; 0xfe <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:
#include <avr/io.h>
#define F_CPU 1000000
#include <util/delay.h>

int main(void)
{
  56:	ff cf       	rjmp	.-2      	; 0x56 <main>

00000058 <_ZN3SPI6configEhhhh>:
	public:
	void config(uint8_t miso,uint8_t mosi,uint8_t sclk,uint8_t ss);
	uint8_t shift(uint8_t data);
};
/***********************************************************************************************************************************************/
void SPI::config(uint8_t miso,uint8_t mosi,uint8_t sclk,uint8_t ss){
  58:	0f 93       	push	r16
  5a:	fc 01       	movw	r30, r24
	pinMISO = miso;
  5c:	60 83       	st	Z, r22
	pinMOSI = mosi;
  5e:	41 83       	std	Z+1, r20	; 0x01
	pinSCLK = sclk;
  60:	22 83       	std	Z+2, r18	; 0x02
	pinSS = ss;
  62:	03 83       	std	Z+3, r16	; 0x03
}
  64:	0f 91       	pop	r16
  66:	08 95       	ret

00000068 <_ZN3SPI5shiftEh>:
/***********************************************************************************************************************************************/
uint8_t SPI::shift(uint8_t data){
  68:	0f 93       	push	r16
  6a:	1f 93       	push	r17
  6c:	fc 01       	movw	r30, r24
	uint8_t buffer;
	//buffer = data;
	buffer = data;	
	PORTB |= 1<<pinSS;
  6e:	48 b3       	in	r20, 0x18	; 24
  70:	21 e0       	ldi	r18, 0x01	; 1
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	c9 01       	movw	r24, r18
  76:	03 80       	ldd	r0, Z+3	; 0x03
  78:	02 c0       	rjmp	.+4      	; 0x7e <_ZN3SPI5shiftEh+0x16>
  7a:	88 0f       	add	r24, r24
  7c:	99 1f       	adc	r25, r25
  7e:	0a 94       	dec	r0
  80:	e2 f7       	brpl	.-8      	; 0x7a <_ZN3SPI5shiftEh+0x12>
  82:	84 2b       	or	r24, r20
  84:	88 bb       	out	0x18, r24	; 24
	for(uint8_t i;i<8;i++)
  86:	40 e0       	ldi	r20, 0x00	; 0
	{		
		PORTB |= 1<<pinSCLK;//Coloca a linha de clock em nivel alto.	
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	58 b3       	in	r21, 0x18	; 24
  8e:	9c 01       	movw	r18, r24
  90:	02 80       	ldd	r0, Z+2	; 0x02
  92:	02 c0       	rjmp	.+4      	; 0x98 <_ZN3SPI5shiftEh+0x30>
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <_ZN3SPI5shiftEh+0x2c>
  9c:	25 2b       	or	r18, r21
  9e:	28 bb       	out	0x18, r18	; 24
		(0x80 & buffer>0) ? PORTB |= 1<<pinMOSI : PORTB &= ~(1<<pinMOSI); //Coloque o bit MSB no pino MOSI.
  a0:	58 b3       	in	r21, 0x18	; 24
  a2:	9c 01       	movw	r18, r24
  a4:	01 80       	ldd	r0, Z+1	; 0x01
  a6:	02 c0       	rjmp	.+4      	; 0xac <_ZN3SPI5shiftEh+0x44>
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	0a 94       	dec	r0
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <_ZN3SPI5shiftEh+0x40>
  b0:	20 95       	com	r18
  b2:	25 23       	and	r18, r21
  b4:	28 bb       	out	0x18, r18	; 24
		buffer<<1;
		(PINB & (1<<pinMISO)>0) ? buffer |= 1<<pinMISO : buffer &= ~(1<<pinMISO); //Coloque o bit contido em pinMISO no buffer.
  b6:	26 b3       	in	r18, 0x16	; 22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	0f e3       	ldi	r16, 0x3F	; 63
  ba:	1d e0       	ldi	r17, 0x0D	; 13
  bc:	23 e0       	ldi	r18, 0x03	; 3
  be:	01 50       	subi	r16, 0x01	; 1
  c0:	10 40       	sbci	r17, 0x00	; 0
  c2:	20 40       	sbci	r18, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <_ZN3SPI5shiftEh+0x56>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <_ZN3SPI5shiftEh+0x60>
  c8:	00 00       	nop
		_delay_ms(1000);
		PORTB &=~(1<<pinSCLK);//Coloca a linha de clock em nivel baixo.
  ca:	58 b3       	in	r21, 0x18	; 24
  cc:	9c 01       	movw	r18, r24
  ce:	02 80       	ldd	r0, Z+2	; 0x02
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <_ZN3SPI5shiftEh+0x6e>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <_ZN3SPI5shiftEh+0x6a>
  da:	20 95       	com	r18
  dc:	25 23       	and	r18, r21
  de:	28 bb       	out	0x18, r18	; 24
  e0:	0f e3       	ldi	r16, 0x3F	; 63
  e2:	1d e0       	ldi	r17, 0x0D	; 13
  e4:	23 e0       	ldi	r18, 0x03	; 3
  e6:	01 50       	subi	r16, 0x01	; 1
  e8:	10 40       	sbci	r17, 0x00	; 0
  ea:	20 40       	sbci	r18, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <_ZN3SPI5shiftEh+0x7e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <_ZN3SPI5shiftEh+0x88>
  f0:	00 00       	nop
uint8_t SPI::shift(uint8_t data){
	uint8_t buffer;
	//buffer = data;
	buffer = data;	
	PORTB |= 1<<pinSS;
	for(uint8_t i;i<8;i++)
  f2:	4f 5f       	subi	r20, 0xFF	; 255
  f4:	48 30       	cpi	r20, 0x08	; 8
  f6:	51 f6       	brne	.-108    	; 0x8c <_ZN3SPI5shiftEh+0x24>
		(PINB & (1<<pinMISO)>0) ? buffer |= 1<<pinMISO : buffer &= ~(1<<pinMISO); //Coloque o bit contido em pinMISO no buffer.
		_delay_ms(1000);
		PORTB &=~(1<<pinSCLK);//Coloca a linha de clock em nivel baixo.
		_delay_ms(1000);		
	}
}
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	08 95       	ret

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
