
NRF24L01_attiny85.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000005a8  0000061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000d80  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001396  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000045e  00000000  00000000  000021b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e0  00000000  00000000  00002614  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000344  00000000  00000000  00002bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000506  00000000  00000000  00002f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bd0  00000000  00000000  0000343e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 ea       	ldi	r30, 0xA8	; 168
  32:	f5 e0       	ldi	r31, 0x05	; 5
  34:	02 c0       	rjmp	.+4      	; 0x3a <__CCP__+0x6>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	ae 36       	cpi	r26, 0x6E	; 110
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__CCP__+0x2>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	ae e6       	ldi	r26, 0x6E	; 110
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ae 36       	cpi	r26, 0x6E	; 110
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	6d d2       	rcall	.+1242   	; 0x52c <main>
  52:	a8 c2       	rjmp	.+1360   	; 0x5a4 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_ZN6Nordic8SPIshiftEh>:
#include <avr/io.h>
#include <util/delay.h>
#include "Nordic_85.h"
/***********************************************************************************************************************************************/
uint8_t Nordic::SPIshift(uint8_t data){
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
  5a:	fc 01       	movw	r30, r24
  5c:	46 2f       	mov	r20, r22
	uint8_t buffer;
	buffer = data;	
  5e:	99 e0       	ldi	r25, 0x09	; 9
	for(uint8_t i=0;i<=8;i++)
	{		
		PORTB |= 1<<pinSCLK;//Coloca a linha de clock em nivel alto.	
  60:	c1 e0       	ldi	r28, 0x01	; 1
  62:	d0 e0       	ldi	r29, 0x00	; 0
  64:	88 b3       	in	r24, 0x18	; 24
  66:	9e 01       	movw	r18, r28
  68:	02 80       	ldd	r0, Z+2	; 0x02
  6a:	02 c0       	rjmp	.+4      	; 0x70 <_ZN6Nordic8SPIshiftEh+0x1a>
  6c:	22 0f       	add	r18, r18
  6e:	33 1f       	adc	r19, r19
  70:	0a 94       	dec	r0
  72:	e2 f7       	brpl	.-8      	; 0x6c <_ZN6Nordic8SPIshiftEh+0x16>
  74:	28 2b       	or	r18, r24
  76:	28 bb       	out	0x18, r18	; 24
		(0x80 & buffer) ? PORTB |= 1<<pinMOSI : PORTB &= ~(1<<pinMOSI); //Coloque o bit MSB no pino MOSI.
  78:	44 23       	and	r20, r20
  7a:	5c f4       	brge	.+22     	; 0x92 <_ZN6Nordic8SPIshiftEh+0x3c>
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	de 01       	movw	r26, r28
  80:	01 80       	ldd	r0, Z+1	; 0x01
  82:	02 c0       	rjmp	.+4      	; 0x88 <_ZN6Nordic8SPIshiftEh+0x32>
  84:	aa 0f       	add	r26, r26
  86:	bb 1f       	adc	r27, r27
  88:	0a 94       	dec	r0
  8a:	e2 f7       	brpl	.-8      	; 0x84 <_ZN6Nordic8SPIshiftEh+0x2e>
  8c:	a8 2b       	or	r26, r24
  8e:	a8 bb       	out	0x18, r26	; 24
  90:	0b c0       	rjmp	.+22     	; 0xa8 <_ZN6Nordic8SPIshiftEh+0x52>
  92:	88 b3       	in	r24, 0x18	; 24
  94:	9e 01       	movw	r18, r28
  96:	01 80       	ldd	r0, Z+1	; 0x01
  98:	02 c0       	rjmp	.+4      	; 0x9e <_ZN6Nordic8SPIshiftEh+0x48>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	0a 94       	dec	r0
  a0:	e2 f7       	brpl	.-8      	; 0x9a <_ZN6Nordic8SPIshiftEh+0x44>
  a2:	20 95       	com	r18
  a4:	28 23       	and	r18, r24
  a6:	28 bb       	out	0x18, r18	; 24
		buffer = buffer	<<1;
  a8:	64 2f       	mov	r22, r20
  aa:	66 0f       	add	r22, r22
		(PINB & (1<<pinMISO)) ? buffer |= 1<<pinMISO : buffer &= ~(1<<pinMISO); //Coloque o bit contido em pinMISO no buffer.
  ac:	26 b3       	in	r18, 0x16	; 22
  ae:	80 81       	ld	r24, Z
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	08 2e       	mov	r0, r24
  b4:	02 c0       	rjmp	.+4      	; 0xba <_ZN6Nordic8SPIshiftEh+0x64>
  b6:	35 95       	asr	r19
  b8:	27 95       	ror	r18
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <_ZN6Nordic8SPIshiftEh+0x60>
  be:	20 ff       	sbrs	r18, 0
  c0:	08 c0       	rjmp	.+16     	; 0xd2 <_ZN6Nordic8SPIshiftEh+0x7c>
  c2:	ae 01       	movw	r20, r28
  c4:	02 c0       	rjmp	.+4      	; 0xca <_ZN6Nordic8SPIshiftEh+0x74>
  c6:	44 0f       	add	r20, r20
  c8:	55 1f       	adc	r21, r21
  ca:	8a 95       	dec	r24
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <_ZN6Nordic8SPIshiftEh+0x70>
  ce:	46 2b       	or	r20, r22
  d0:	09 c0       	rjmp	.+18     	; 0xe4 <_ZN6Nordic8SPIshiftEh+0x8e>
  d2:	9e 01       	movw	r18, r28
  d4:	02 c0       	rjmp	.+4      	; 0xda <_ZN6Nordic8SPIshiftEh+0x84>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <_ZN6Nordic8SPIshiftEh+0x80>
  de:	42 2f       	mov	r20, r18
  e0:	40 95       	com	r20
  e2:	46 23       	and	r20, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	a1 ee       	ldi	r26, 0xE1	; 225
  e6:	b4 e0       	ldi	r27, 0x04	; 4
  e8:	11 97       	sbiw	r26, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <_ZN6Nordic8SPIshiftEh+0x92>
  ec:	00 c0       	rjmp	.+0      	; 0xee <_ZN6Nordic8SPIshiftEh+0x98>
  ee:	00 00       	nop
		_delay_ms(5);
		PORTB &=~(1<<pinSCLK);//Coloca a linha de clock em nivel baixo.
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	9e 01       	movw	r18, r28
  f4:	02 80       	ldd	r0, Z+2	; 0x02
  f6:	02 c0       	rjmp	.+4      	; 0xfc <_ZN6Nordic8SPIshiftEh+0xa6>
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <_ZN6Nordic8SPIshiftEh+0xa2>
 100:	20 95       	com	r18
 102:	28 23       	and	r18, r24
 104:	28 bb       	out	0x18, r18	; 24
 106:	a1 ee       	ldi	r26, 0xE1	; 225
 108:	b4 e0       	ldi	r27, 0x04	; 4
 10a:	11 97       	sbiw	r26, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <_ZN6Nordic8SPIshiftEh+0xb4>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <_ZN6Nordic8SPIshiftEh+0xba>
 110:	00 00       	nop
 112:	91 50       	subi	r25, 0x01	; 1
#include "Nordic_85.h"
/***********************************************************************************************************************************************/
uint8_t Nordic::SPIshift(uint8_t data){
	uint8_t buffer;
	buffer = data;	
	for(uint8_t i=0;i<=8;i++)
 114:	09 f0       	breq	.+2      	; 0x118 <_ZN6Nordic8SPIshiftEh+0xc2>
 116:	a6 cf       	rjmp	.-180    	; 0x64 <_ZN6Nordic8SPIshiftEh+0xe>
		PORTB &=~(1<<pinSCLK);//Coloca a linha de clock em nivel baixo.
		_delay_ms(5);		
	}
	
	return buffer;
}
 118:	84 2f       	mov	r24, r20
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <_ZN6NordicC1Ehhh>:
/***********************************************************************************************************************************************/
Nordic::Nordic(uint8_t miso,uint8_t mosi,uint8_t sclk){
 120:	fc 01       	movw	r30, r24
	pinMISO = miso;
 122:	60 83       	st	Z, r22
	pinMOSI = mosi;
 124:	41 83       	std	Z+1, r20	; 0x01
	pinSCLK = sclk;
 126:	22 83       	std	Z+2, r18	; 0x02
	DDRB |= (1<<pinMOSI)|(1<<pinSCLK);
 128:	37 b3       	in	r19, 0x17	; 23
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	bc 01       	movw	r22, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <_ZN6NordicC1Ehhh+0x16>
 132:	66 0f       	add	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	4a 95       	dec	r20
 138:	e2 f7       	brpl	.-8      	; 0x132 <_ZN6NordicC1Ehhh+0x12>
 13a:	ab 01       	movw	r20, r22
 13c:	43 2b       	or	r20, r19
 13e:	bc 01       	movw	r22, r24
 140:	02 c0       	rjmp	.+4      	; 0x146 <_ZN6NordicC1Ehhh+0x26>
 142:	66 0f       	add	r22, r22
 144:	77 1f       	adc	r23, r23
 146:	2a 95       	dec	r18
 148:	e2 f7       	brpl	.-8      	; 0x142 <_ZN6NordicC1Ehhh+0x22>
 14a:	9b 01       	movw	r18, r22
 14c:	24 2b       	or	r18, r20
 14e:	27 bb       	out	0x17, r18	; 23
	DDRB &= ~(1<<pinMISO);
 150:	27 b3       	in	r18, 0x17	; 23
 152:	00 80       	ld	r0, Z
 154:	02 c0       	rjmp	.+4      	; 0x15a <_ZN6NordicC1Ehhh+0x3a>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <_ZN6NordicC1Ehhh+0x36>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	87 bb       	out	0x17, r24	; 23
	channel = 1;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	86 83       	std	Z+6, r24	; 0x06
	payload = 16;
 168:	80 e1       	ldi	r24, 0x10	; 16
 16a:	87 83       	std	Z+7, r24	; 0x07
}
 16c:	08 95       	ret

0000016e <_ZN6Nordic12transferSyncEPhS0_h>:

void Nordic::transferSync(uint8_t *dataout,uint8_t *datain,uint8_t len){
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	6c 01       	movw	r12, r24
 180:	d2 2f       	mov	r29, r18
	uint8_t i;
	for(i = 0;i < len;i++){
 182:	22 23       	and	r18, r18
 184:	81 f0       	breq	.+32     	; 0x1a6 <_ZN6Nordic12transferSyncEPhS0_h+0x38>
 186:	06 2f       	mov	r16, r22
 188:	17 2f       	mov	r17, r23
 18a:	e4 2e       	mov	r14, r20
 18c:	f5 2e       	mov	r15, r21
 18e:	c0 e0       	ldi	r28, 0x00	; 0
		datain[i] = SPIshift(dataout[i]);
 190:	f8 01       	movw	r30, r16
 192:	61 91       	ld	r22, Z+
 194:	8f 01       	movw	r16, r30
 196:	c6 01       	movw	r24, r12
 198:	5e df       	rcall	.-324    	; 0x56 <_ZN6Nordic8SPIshiftEh>
 19a:	f7 01       	movw	r30, r14
 19c:	81 93       	st	Z+, r24
 19e:	7f 01       	movw	r14, r30
	payload = 16;
}

void Nordic::transferSync(uint8_t *dataout,uint8_t *datain,uint8_t len){
	uint8_t i;
	for(i = 0;i < len;i++){
 1a0:	cf 5f       	subi	r28, 0xFF	; 255
 1a2:	cd 17       	cp	r28, r29
 1a4:	a9 f7       	brne	.-22     	; 0x190 <_ZN6Nordic12transferSyncEPhS0_h+0x22>
		datain[i] = SPIshift(dataout[i]);
	}
}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	df 90       	pop	r13
 1b4:	cf 90       	pop	r12
 1b6:	08 95       	ret

000001b8 <_ZN6Nordic12transmitSyncEPhh>:

void Nordic::transmitSync(uint8_t *dataout,uint8_t len){
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	7c 01       	movw	r14, r24
 1c6:	d4 2f       	mov	r29, r20
	uint8_t i;
	for(i = 0;i < len;i++){
 1c8:	44 23       	and	r20, r20
 1ca:	59 f0       	breq	.+22     	; 0x1e2 <_ZN6Nordic12transmitSyncEPhh+0x2a>
 1cc:	06 2f       	mov	r16, r22
 1ce:	17 2f       	mov	r17, r23
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
		SPIshift(dataout[i]);
 1d2:	f8 01       	movw	r30, r16
 1d4:	61 91       	ld	r22, Z+
 1d6:	8f 01       	movw	r16, r30
 1d8:	c7 01       	movw	r24, r14
 1da:	3d df       	rcall	.-390    	; 0x56 <_ZN6Nordic8SPIshiftEh>
	}
}

void Nordic::transmitSync(uint8_t *dataout,uint8_t len){
	uint8_t i;
	for(i = 0;i < len;i++){
 1dc:	cf 5f       	subi	r28, 0xFF	; 255
 1de:	cd 17       	cp	r28, r29
 1e0:	c1 f7       	brne	.-16     	; 0x1d2 <_ZN6Nordic12transmitSyncEPhh+0x1a>
		SPIshift(dataout[i]);
	}
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	08 95       	ret

000001f0 <_ZN6Nordic4ceHiEv>:
	PTX = 1;
	configRegister(CONFIG, mirf_CONFIG | ( (1<<PWR_UP) | (0<<PRIM_RX) ) );
}

void Nordic::ceHi(){
	PORTB |= 1<<cePin;
 1f0:	48 b3       	in	r20, 0x18	; 24
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	fc 01       	movw	r30, r24
 1f8:	04 80       	ldd	r0, Z+4	; 0x04
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <_ZN6Nordic4ceHiEv+0x10>
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <_ZN6Nordic4ceHiEv+0xc>
 204:	24 2b       	or	r18, r20
 206:	28 bb       	out	0x18, r18	; 24
}
 208:	08 95       	ret

0000020a <_ZN6Nordic5ceLowEv>:

void Nordic::ceLow(){
	PORTB &= ~(1<<cePin);
 20a:	48 b3       	in	r20, 0x18	; 24
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	fc 01       	movw	r30, r24
 212:	04 80       	ldd	r0, Z+4	; 0x04
 214:	02 c0       	rjmp	.+4      	; 0x21a <_ZN6Nordic5ceLowEv+0x10>
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <_ZN6Nordic5ceLowEv+0xc>
 21e:	20 95       	com	r18
 220:	42 23       	and	r20, r18
 222:	48 bb       	out	0x18, r20	; 24
}
 224:	08 95       	ret

00000226 <_ZN6Nordic5csnHiEv>:

void Nordic::csnHi(){
	PORTB |= 1<<csnPin;
 226:	48 b3       	in	r20, 0x18	; 24
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	fc 01       	movw	r30, r24
 22e:	05 80       	ldd	r0, Z+5	; 0x05
 230:	02 c0       	rjmp	.+4      	; 0x236 <_ZN6Nordic5csnHiEv+0x10>
 232:	22 0f       	add	r18, r18
 234:	33 1f       	adc	r19, r19
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <_ZN6Nordic5csnHiEv+0xc>
 23a:	24 2b       	or	r18, r20
 23c:	28 bb       	out	0x18, r18	; 24
}
 23e:	08 95       	ret

00000240 <_ZN6Nordic4initEv>:


void Nordic::init() 
// Initializes pins to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{   
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ec 01       	movw	r28, r24
    DDRB |= 1<<cePin;
 246:	47 b3       	in	r20, 0x17	; 23
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	9c 01       	movw	r18, r24
 24e:	0c 80       	ldd	r0, Y+4	; 0x04
 250:	02 c0       	rjmp	.+4      	; 0x256 <_ZN6Nordic4initEv+0x16>
 252:	22 0f       	add	r18, r18
 254:	33 1f       	adc	r19, r19
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <_ZN6Nordic4initEv+0x12>
 25a:	24 2b       	or	r18, r20
 25c:	27 bb       	out	0x17, r18	; 23
    DDRB |= 1<<csnPin;
 25e:	27 b3       	in	r18, 0x17	; 23
 260:	0d 80       	ldd	r0, Y+5	; 0x05
 262:	02 c0       	rjmp	.+4      	; 0x268 <__stack+0x9>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	0a 94       	dec	r0
 26a:	e2 f7       	brpl	.-8      	; 0x264 <__stack+0x5>
 26c:	82 2b       	or	r24, r18
 26e:	87 bb       	out	0x17, r24	; 23
    
    ceLow();
 270:	ce 01       	movw	r24, r28
 272:	cb df       	rcall	.-106    	; 0x20a <_ZN6Nordic5ceLowEv>
    csnHi();
 274:	ce 01       	movw	r24, r28
 276:	d7 df       	rcall	.-82     	; 0x226 <_ZN6Nordic5csnHiEv>

}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <_ZN6Nordic6csnLowEv>:
void Nordic::csnHi(){
	PORTB |= 1<<csnPin;
}

void Nordic::csnLow(){
	PORTB &= ~(1<<csnPin);
 27e:	48 b3       	in	r20, 0x18	; 24
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	fc 01       	movw	r30, r24
 286:	05 80       	ldd	r0, Z+5	; 0x05
 288:	02 c0       	rjmp	.+4      	; 0x28e <_ZN6Nordic6csnLowEv+0x10>
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	0a 94       	dec	r0
 290:	e2 f7       	brpl	.-8      	; 0x28a <_ZN6Nordic6csnLowEv+0xc>
 292:	20 95       	com	r18
 294:	42 23       	and	r20, r18
 296:	48 bb       	out	0x18, r20	; 24
}
 298:	08 95       	ret

0000029a <_ZN6Nordic7flushRxEv>:
	configRegister(CONFIG, mirf_CONFIG | ( (1<<PWR_UP) | (1<<PRIM_RX) ) );
	ceHi();
	configRegister(STATUS,(1 << TX_DS) | (1 << MAX_RT)); 
}

void Nordic::flushRx(){
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	ec 01       	movw	r28, r24
    csnLow();
 2a0:	ee df       	rcall	.-36     	; 0x27e <_ZN6Nordic6csnLowEv>
    SPIshift( FLUSH_RX );
 2a2:	ce 01       	movw	r24, r28
 2a4:	62 ee       	ldi	r22, 0xE2	; 226
 2a6:	d7 de       	rcall	.-594    	; 0x56 <_ZN6Nordic8SPIshiftEh>
    csnHi();
 2a8:	ce 01       	movw	r24, r28
 2aa:	bd df       	rcall	.-134    	; 0x226 <_ZN6Nordic5csnHiEv>
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <_ZN6Nordic13writeRegisterEhPhh>:
    csnHi();
}

void Nordic::writeRegister(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
 2b2:	ef 92       	push	r14
 2b4:	ff 92       	push	r15
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	8c 01       	movw	r16, r24
 2c0:	c6 2f       	mov	r28, r22
 2c2:	7a 01       	movw	r14, r20
 2c4:	d2 2f       	mov	r29, r18
    csnLow();
 2c6:	db df       	rcall	.-74     	; 0x27e <_ZN6Nordic6csnLowEv>
    SPIshift(W_REGISTER | (REGISTER_MASK & reg));
 2c8:	cf 71       	andi	r28, 0x1F	; 31
 2ca:	6c 2f       	mov	r22, r28
 2cc:	60 62       	ori	r22, 0x20	; 32
 2ce:	c8 01       	movw	r24, r16
 2d0:	c2 de       	rcall	.-636    	; 0x56 <_ZN6Nordic8SPIshiftEh>
    transmitSync(value,len);
 2d2:	c8 01       	movw	r24, r16
 2d4:	b7 01       	movw	r22, r14
 2d6:	4d 2f       	mov	r20, r29
 2d8:	6f df       	rcall	.-290    	; 0x1b8 <_ZN6Nordic12transmitSyncEPhh>
    csnHi();
 2da:	c8 01       	movw	r24, r16
 2dc:	a4 df       	rcall	.-184    	; 0x226 <_ZN6Nordic5csnHiEv>
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	ef 90       	pop	r14
 2ea:	08 95       	ret

000002ec <_ZN6Nordic8setTADDREPh>:
	ceHi();
}

void Nordic::setTADDR(uint8_t * adr)
// Sets the transmitting address
{
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	ec 01       	movw	r28, r24
 2f6:	8b 01       	movw	r16, r22
	/*
	 * RX_ADDR_P0 must be set to the sending addr for auto ack to work.
	 */

	writeRegister(RX_ADDR_P0,adr,mirf_ADDR_LEN);
 2f8:	6a e0       	ldi	r22, 0x0A	; 10
 2fa:	a8 01       	movw	r20, r16
 2fc:	25 e0       	ldi	r18, 0x05	; 5
 2fe:	d9 df       	rcall	.-78     	; 0x2b2 <_ZN6Nordic13writeRegisterEhPhh>
	writeRegister(TX_ADDR,adr,mirf_ADDR_LEN);
 300:	ce 01       	movw	r24, r28
 302:	60 e1       	ldi	r22, 0x10	; 16
 304:	a8 01       	movw	r20, r16
 306:	25 e0       	ldi	r18, 0x05	; 5
 308:	d4 df       	rcall	.-88     	; 0x2b2 <_ZN6Nordic13writeRegisterEhPhh>
}
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	08 95       	ret

00000314 <_ZN6Nordic8setRADDREPh>:
    flushRx();
}

void Nordic::setRADDR(uint8_t * adr) 
// Sets the receiving address
{
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	ec 01       	movw	r28, r24
 31e:	8b 01       	movw	r16, r22
	ceLow();
 320:	74 df       	rcall	.-280    	; 0x20a <_ZN6Nordic5ceLowEv>
	writeRegister(RX_ADDR_P1,adr,mirf_ADDR_LEN);
 322:	ce 01       	movw	r24, r28
 324:	6b e0       	ldi	r22, 0x0B	; 11
 326:	a8 01       	movw	r20, r16
 328:	25 e0       	ldi	r18, 0x05	; 5
 32a:	c3 df       	rcall	.-122    	; 0x2b2 <_ZN6Nordic13writeRegisterEhPhh>
	ceHi();
 32c:	ce 01       	movw	r24, r28
 32e:	60 df       	rcall	.-320    	; 0x1f0 <_ZN6Nordic4ceHiEv>
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	08 95       	ret

0000033a <_ZN6Nordic12readRegisterEhPhh>:
    csnHi();
}

void Nordic::readRegister(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	8c 01       	movw	r16, r24
 348:	c6 2f       	mov	r28, r22
 34a:	7a 01       	movw	r14, r20
 34c:	d2 2f       	mov	r29, r18
    csnLow();
 34e:	97 df       	rcall	.-210    	; 0x27e <_ZN6Nordic6csnLowEv>
    SPIshift(R_REGISTER | (REGISTER_MASK & reg));
 350:	6c 2f       	mov	r22, r28
 352:	6f 71       	andi	r22, 0x1F	; 31
 354:	c8 01       	movw	r24, r16
 356:	7f de       	rcall	.-770    	; 0x56 <_ZN6Nordic8SPIshiftEh>
    transferSync(value,value,len);
 358:	c8 01       	movw	r24, r16
 35a:	b7 01       	movw	r22, r14
 35c:	a7 01       	movw	r20, r14
 35e:	2d 2f       	mov	r18, r29
 360:	06 df       	rcall	.-500    	; 0x16e <_ZN6Nordic12transferSyncEPhS0_h>
    csnHi();
 362:	c8 01       	movw	r24, r16
 364:	60 df       	rcall	.-320    	; 0x226 <_ZN6Nordic5csnHiEv>
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	ff 90       	pop	r15
 370:	ef 90       	pop	r14
 372:	08 95       	ret

00000374 <_ZN6Nordic9getStatusEv>:
		return true;
	}
	return false;
}

uint8_t Nordic::getStatus(){
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	0f 92       	push	r0
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
	uint8_t rv;
	readRegister(STATUS,&rv,1);
 37e:	67 e0       	ldi	r22, 0x07	; 7
 380:	ae 01       	movw	r20, r28
 382:	4f 5f       	subi	r20, 0xFF	; 255
 384:	5f 4f       	sbci	r21, 0xFF	; 255
 386:	21 e0       	ldi	r18, 0x01	; 1
 388:	d8 df       	rcall	.-80     	; 0x33a <_ZN6Nordic12readRegisterEhPhh>
	return rv;
}
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	0f 90       	pop	r0
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <_ZN6Nordic11rxFifoEmptyEv>:
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) return 1;
    return !rxFifoEmpty();
}

bool Nordic::rxFifoEmpty(){
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	0f 92       	push	r0
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
	uint8_t fifoStatus;

	readRegister(FIFO_STATUS,&fifoStatus,sizeof(fifoStatus));
 39e:	67 e1       	ldi	r22, 0x17	; 23
 3a0:	ae 01       	movw	r20, r28
 3a2:	4f 5f       	subi	r20, 0xFF	; 255
 3a4:	5f 4f       	sbci	r21, 0xFF	; 255
 3a6:	21 e0       	ldi	r18, 0x01	; 1
 3a8:	c8 df       	rcall	.-112    	; 0x33a <_ZN6Nordic12readRegisterEhPhh>
	return (fifoStatus & (1 << RX_EMPTY));
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
}
 3ac:	81 70       	andi	r24, 0x01	; 1
 3ae:	0f 90       	pop	r0
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <_ZN6Nordic9dataReadyEv>:
	writeRegister(TX_ADDR,adr,mirf_ADDR_LEN);
}

bool Nordic::dataReady() 
// Checks if data is available for reading
{
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	ec 01       	movw	r28, r24
    // See note in getData() function - just checking RX_DR isn't good enough
	uint8_t status = getStatus();
 3bc:	db df       	rcall	.-74     	; 0x374 <_ZN6Nordic9getStatusEv>

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) return 1;
 3be:	86 fd       	sbrc	r24, 6
 3c0:	05 c0       	rjmp	.+10     	; 0x3cc <_ZN6Nordic9dataReadyEv+0x16>
    return !rxFifoEmpty();
 3c2:	ce 01       	movw	r24, r28
 3c4:	e7 df       	rcall	.-50     	; 0x394 <_ZN6Nordic11rxFifoEmptyEv>
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	89 27       	eor	r24, r25
 3ca:	01 c0       	rjmp	.+2      	; 0x3ce <_ZN6Nordic9dataReadyEv+0x18>
    // See note in getData() function - just checking RX_DR isn't good enough
	uint8_t status = getStatus();

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) return 1;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
    return !rxFifoEmpty();
}
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <_ZN6Nordic14configRegisterEhh>:
    configRegister(STATUS,(1<<RX_DR));   // Reset status register
}

void Nordic::configRegister(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
 3d4:	0f 93       	push	r16
 3d6:	1f 93       	push	r17
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	ec 01       	movw	r28, r24
 3de:	06 2f       	mov	r16, r22
 3e0:	14 2f       	mov	r17, r20
    csnLow();
 3e2:	4d df       	rcall	.-358    	; 0x27e <_ZN6Nordic6csnLowEv>
    SPIshift(W_REGISTER | (REGISTER_MASK & reg));
 3e4:	0f 71       	andi	r16, 0x1F	; 31
 3e6:	60 2f       	mov	r22, r16
 3e8:	60 62       	ori	r22, 0x20	; 32
 3ea:	ce 01       	movw	r24, r28
 3ec:	34 de       	rcall	.-920    	; 0x56 <_ZN6Nordic8SPIshiftEh>
    SPIshift(value);
 3ee:	ce 01       	movw	r24, r28
 3f0:	61 2f       	mov	r22, r17
 3f2:	31 de       	rcall	.-926    	; 0x56 <_ZN6Nordic8SPIshiftEh>
    csnHi();
 3f4:	ce 01       	movw	r24, r28
 3f6:	17 df       	rcall	.-466    	; 0x226 <_ZN6Nordic5csnHiEv>
}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	08 95       	ret

00000402 <_ZN6Nordic9powerUpTxEv>:
    SPIshift( FLUSH_RX );
    csnHi();
}

void Nordic::powerUpTx(){
	PTX = 1;
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	fc 01       	movw	r30, r24
 406:	23 83       	std	Z+3, r18	; 0x03
	configRegister(CONFIG, mirf_CONFIG | ( (1<<PWR_UP) | (0<<PRIM_RX) ) );
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	4a e0       	ldi	r20, 0x0A	; 10
 40c:	e3 df       	rcall	.-58     	; 0x3d4 <_ZN6Nordic14configRegisterEhh>
}
 40e:	08 95       	ret

00000410 <_ZN6Nordic9powerUpRxEv>:
	uint8_t rv;
	readRegister(STATUS,&rv,1);
	return rv;
}

void Nordic::powerUpRx(){
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	ec 01       	movw	r28, r24
	PTX = 0;
 416:	1b 82       	std	Y+3, r1	; 0x03
	ceLow();
 418:	f8 de       	rcall	.-528    	; 0x20a <_ZN6Nordic5ceLowEv>
	configRegister(CONFIG, mirf_CONFIG | ( (1<<PWR_UP) | (1<<PRIM_RX) ) );
 41a:	ce 01       	movw	r24, r28
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	4b e0       	ldi	r20, 0x0B	; 11
 420:	d9 df       	rcall	.-78     	; 0x3d4 <_ZN6Nordic14configRegisterEhh>
	ceHi();
 422:	ce 01       	movw	r24, r28
 424:	e5 de       	rcall	.-566    	; 0x1f0 <_ZN6Nordic4ceHiEv>
	configRegister(STATUS,(1 << TX_DS) | (1 << MAX_RT)); 
 426:	ce 01       	movw	r24, r28
 428:	67 e0       	ldi	r22, 0x07	; 7
 42a:	40 e3       	ldi	r20, 0x30	; 48
 42c:	d3 df       	rcall	.-90     	; 0x3d4 <_ZN6Nordic14configRegisterEhh>
}
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <_ZN6Nordic9isSendingEv>:
 * Test if chip is still sending.
 * When sending has finished return chip to listening.
 *
 */

bool Nordic::isSending(){
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	ec 01       	movw	r28, r24
	uint8_t status;
	if(PTX){
 43a:	8b 81       	ldd	r24, Y+3	; 0x03
 43c:	88 23       	and	r24, r24
 43e:	41 f0       	breq	.+16     	; 0x450 <_ZN6Nordic9isSendingEv+0x1c>
		status = getStatus();
 440:	ce 01       	movw	r24, r28
 442:	98 df       	rcall	.-208    	; 0x374 <_ZN6Nordic9getStatusEv>
	    	
		/*
		 *  if sending successful (TX_DS) or max retries exceded (MAX_RT).
		 */

		if((status & ((1 << TX_DS)  | (1 << MAX_RT)))){
 444:	80 73       	andi	r24, 0x30	; 48
 446:	31 f0       	breq	.+12     	; 0x454 <_ZN6Nordic9isSendingEv+0x20>
			powerUpRx();
 448:	ce 01       	movw	r24, r28
 44a:	e2 df       	rcall	.-60     	; 0x410 <_ZN6Nordic9powerUpRxEv>
			return false; 
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	03 c0       	rjmp	.+6      	; 0x456 <_ZN6Nordic9isSendingEv+0x22>
		}

		return true;
	}
	return false;
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	01 c0       	rjmp	.+2      	; 0x456 <_ZN6Nordic9isSendingEv+0x22>
		if((status & ((1 << TX_DS)  | (1 << MAX_RT)))){
			powerUpRx();
			return false; 
		}

		return true;
 454:	81 e0       	ldi	r24, 0x01	; 1
	}
	return false;
}
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <_ZN6Nordic6configEv>:

void Nordic::config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
// NB: channel and payload must be set now.
{
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	ec 01       	movw	r28, r24
    // Set RF channel
	configRegister(RF_CH,channel);
 462:	65 e0       	ldi	r22, 0x05	; 5
 464:	4e 81       	ldd	r20, Y+6	; 0x06
 466:	b6 df       	rcall	.-148    	; 0x3d4 <_ZN6Nordic14configRegisterEhh>

    // Set length of incoming payload 
	configRegister(RX_PW_P0, payload);
 468:	ce 01       	movw	r24, r28
 46a:	61 e1       	ldi	r22, 0x11	; 17
 46c:	4f 81       	ldd	r20, Y+7	; 0x07
 46e:	b2 df       	rcall	.-156    	; 0x3d4 <_ZN6Nordic14configRegisterEhh>
	configRegister(RX_PW_P1, payload);
 470:	ce 01       	movw	r24, r28
 472:	62 e1       	ldi	r22, 0x12	; 18
 474:	4f 81       	ldd	r20, Y+7	; 0x07
 476:	ae df       	rcall	.-164    	; 0x3d4 <_ZN6Nordic14configRegisterEhh>

    // Start receiver 
    powerUpRx();
 478:	ce 01       	movw	r24, r28
 47a:	ca df       	rcall	.-108    	; 0x410 <_ZN6Nordic9powerUpRxEv>
    flushRx();
 47c:	ce 01       	movw	r24, r28
 47e:	0d df       	rcall	.-486    	; 0x29a <_ZN6Nordic7flushRxEv>
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <_ZN6Nordic4sendEPh>:


void Nordic::send(uint8_t * value) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 486:	0f 93       	push	r16
 488:	1f 93       	push	r17
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	ec 01       	movw	r28, r24
 490:	8b 01       	movw	r16, r22
    uint8_t status;
    status = getStatus();
 492:	70 df       	rcall	.-288    	; 0x374 <_ZN6Nordic9getStatusEv>

    while (PTX) {
 494:	06 c0       	rjmp	.+12     	; 0x4a2 <_ZN6Nordic4sendEPh+0x1c>
	    status = getStatus();
 496:	ce 01       	movw	r24, r28
 498:	6d df       	rcall	.-294    	; 0x374 <_ZN6Nordic9getStatusEv>

	    if((status & ((1 << TX_DS)  | (1 << MAX_RT)))){
 49a:	80 73       	andi	r24, 0x30	; 48
 49c:	11 f0       	breq	.+4      	; 0x4a2 <_ZN6Nordic4sendEPh+0x1c>
		    PTX = 0;
 49e:	1b 82       	std	Y+3, r1	; 0x03
		    break;
 4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <_ZN6Nordic4sendEPh+0x22>
// amount of bytes as configured as payload on the receiver.
{
    uint8_t status;
    status = getStatus();

    while (PTX) {
 4a2:	8b 81       	ldd	r24, Y+3	; 0x03
 4a4:	88 23       	and	r24, r24
 4a6:	b9 f7       	brne	.-18     	; 0x496 <_ZN6Nordic4sendEPh+0x10>
		    PTX = 0;
		    break;
	    }
    }                  // Wait until last paket is send

    ceLow();
 4a8:	ce 01       	movw	r24, r28
 4aa:	af de       	rcall	.-674    	; 0x20a <_ZN6Nordic5ceLowEv>
    
    powerUpTx();       // Set to transmitter mode , Power up
 4ac:	ce 01       	movw	r24, r28
 4ae:	a9 df       	rcall	.-174    	; 0x402 <_ZN6Nordic9powerUpTxEv>
    
    csnLow();                    // Pull down chip select
 4b0:	ce 01       	movw	r24, r28
 4b2:	e5 de       	rcall	.-566    	; 0x27e <_ZN6Nordic6csnLowEv>
    SPIshift( FLUSH_TX );     // Write cmd to flush tx fifo
 4b4:	ce 01       	movw	r24, r28
 4b6:	61 ee       	ldi	r22, 0xE1	; 225
 4b8:	ce dd       	rcall	.-1124   	; 0x56 <_ZN6Nordic8SPIshiftEh>
    csnHi();                    // Pull up chip select
 4ba:	ce 01       	movw	r24, r28
 4bc:	b4 de       	rcall	.-664    	; 0x226 <_ZN6Nordic5csnHiEv>
    
    csnLow();                    // Pull down chip select
 4be:	ce 01       	movw	r24, r28
 4c0:	de de       	rcall	.-580    	; 0x27e <_ZN6Nordic6csnLowEv>
    SPIshift( W_TX_PAYLOAD ); // Write cmd to write payload
 4c2:	ce 01       	movw	r24, r28
 4c4:	60 ea       	ldi	r22, 0xA0	; 160
 4c6:	c7 dd       	rcall	.-1138   	; 0x56 <_ZN6Nordic8SPIshiftEh>
    transmitSync(value,payload);   // Write payload
 4c8:	ce 01       	movw	r24, r28
 4ca:	b8 01       	movw	r22, r16
 4cc:	4f 81       	ldd	r20, Y+7	; 0x07
 4ce:	74 de       	rcall	.-792    	; 0x1b8 <_ZN6Nordic12transmitSyncEPhh>
    csnHi();                    // Pull up chip select
 4d0:	ce 01       	movw	r24, r28
 4d2:	a9 de       	rcall	.-686    	; 0x226 <_ZN6Nordic5csnHiEv>

    ceHi();                     // Start transmission
 4d4:	ce 01       	movw	r24, r28
 4d6:	8c de       	rcall	.-744    	; 0x1f0 <_ZN6Nordic4ceHiEv>
}
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	1f 91       	pop	r17
 4de:	0f 91       	pop	r16
 4e0:	08 95       	ret

000004e2 <_ZN6Nordic7getDataEPh>:



void Nordic::getData(uint8_t * data) 
// Reads payload bytes into data array
{
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	ec 01       	movw	r28, r24
 4ec:	8b 01       	movw	r16, r22
    csnLow();                               // Pull down chip select
 4ee:	c7 de       	rcall	.-626    	; 0x27e <_ZN6Nordic6csnLowEv>
    SPIshift( R_RX_PAYLOAD );            // Send cmd to read rx payload
 4f0:	ce 01       	movw	r24, r28
 4f2:	61 e6       	ldi	r22, 0x61	; 97
 4f4:	b0 dd       	rcall	.-1184   	; 0x56 <_ZN6Nordic8SPIshiftEh>
    transferSync(data,data,payload); // Read payload
 4f6:	ce 01       	movw	r24, r28
 4f8:	b8 01       	movw	r22, r16
 4fa:	a8 01       	movw	r20, r16
 4fc:	2f 81       	ldd	r18, Y+7	; 0x07
 4fe:	37 de       	rcall	.-914    	; 0x16e <_ZN6Nordic12transferSyncEPhS0_h>
    csnHi();                               // Pull up chip select
 500:	ce 01       	movw	r24, r28
 502:	91 de       	rcall	.-734    	; 0x226 <_ZN6Nordic5csnHiEv>
    //  2) clear RX_DR IRQ, 3) read FIFO_STATUS to check if there are more 
    //  payloads available in RX FIFO, 4) if there are more data in RX FIFO,
    //  repeat from step 1)."
    // So if we're going to clear RX_DR here, we need to check the RX FIFO
    // in the dataReady() function
    configRegister(STATUS,(1<<RX_DR));   // Reset status register
 504:	ce 01       	movw	r24, r28
 506:	67 e0       	ldi	r22, 0x07	; 7
 508:	40 e4       	ldi	r20, 0x40	; 64
 50a:	64 df       	rcall	.-312    	; 0x3d4 <_ZN6Nordic14configRegisterEhh>
}
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	1f 91       	pop	r17
 512:	0f 91       	pop	r16
 514:	08 95       	ret

00000516 <_ZN6Nordic9powerDownEv>:

void Nordic::csnLow(){
	PORTB &= ~(1<<csnPin);
}

void Nordic::powerDown(){
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	ec 01       	movw	r28, r24
	ceLow();
 51c:	76 de       	rcall	.-788    	; 0x20a <_ZN6Nordic5ceLowEv>
	configRegister(CONFIG, mirf_CONFIG );
 51e:	ce 01       	movw	r24, r28
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	48 e0       	ldi	r20, 0x08	; 8
 524:	57 df       	rcall	.-338    	; 0x3d4 <_ZN6Nordic14configRegisterEhh>
}
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <main>:
uint8_t Myaddress[] = "att85"; 
uint8_t remoteAddress[] = "_ard_";
uint8_t CH = 10;

int main(void)
{
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
 534:	29 97       	sbiw	r28, 0x09	; 9
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	f8 94       	cli
 53a:	de bf       	out	0x3e, r29	; 62
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	cd bf       	out	0x3d, r28	; 61
	Nordic radio(0,1,2);
 540:	ce 01       	movw	r24, r28
 542:	02 96       	adiw	r24, 0x02	; 2
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	41 e0       	ldi	r20, 0x01	; 1
 548:	22 e0       	ldi	r18, 0x02	; 2
 54a:	ea dd       	rcall	.-1068   	; 0x120 <_ZN6NordicC1Ehhh>
	radio.cePin = 3;
 54c:	83 e0       	ldi	r24, 0x03	; 3
 54e:	8e 83       	std	Y+6, r24	; 0x06
	radio.csnPin = 4;
 550:	84 e0       	ldi	r24, 0x04	; 4
 552:	8f 83       	std	Y+7, r24	; 0x07
	radio.init();
 554:	ce 01       	movw	r24, r28
 556:	02 96       	adiw	r24, 0x02	; 2
 558:	73 de       	rcall	.-794    	; 0x240 <_ZN6Nordic4initEv>
	radio.setRADDR((uint8_t *)Myaddress);
 55a:	ce 01       	movw	r24, r28
 55c:	02 96       	adiw	r24, 0x02	; 2
 55e:	67 e6       	ldi	r22, 0x67	; 103
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	d8 de       	rcall	.-592    	; 0x314 <_ZN6Nordic8setRADDREPh>
	radio.setTADDR((uint8_t *)remoteAddress);
 564:	ce 01       	movw	r24, r28
 566:	02 96       	adiw	r24, 0x02	; 2
 568:	61 e6       	ldi	r22, 0x61	; 97
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	bf de       	rcall	.-642    	; 0x2ec <_ZN6Nordic8setTADDREPh>
	radio.payload = 32;
 56e:	80 e2       	ldi	r24, 0x20	; 32
 570:	89 87       	std	Y+9, r24	; 0x09
	radio.channel = CH;
 572:	80 91 60 00 	lds	r24, 0x0060
 576:	88 87       	std	Y+8, r24	; 0x08
	radio.config();
 578:	ce 01       	movw	r24, r28
 57a:	02 96       	adiw	r24, 0x02	; 2
 57c:	6f df       	rcall	.-290    	; 0x45c <_ZN6Nordic6configEv>
    
	uint8_t aux;
	while(1)
    {
        radio.send(&aux);
 57e:	ce 01       	movw	r24, r28
 580:	02 96       	adiw	r24, 0x02	; 2
 582:	be 01       	movw	r22, r28
 584:	6f 5f       	subi	r22, 0xFF	; 255
 586:	7f 4f       	sbci	r23, 0xFF	; 255
 588:	7e df       	rcall	.-260    	; 0x486 <_ZN6Nordic4sendEPh>
		aux++; 
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	8f 5f       	subi	r24, 0xFF	; 255
 58e:	89 83       	std	Y+1, r24	; 0x01
 590:	8f e3       	ldi	r24, 0x3F	; 63
 592:	9d e0       	ldi	r25, 0x0D	; 13
 594:	a3 e0       	ldi	r26, 0x03	; 3
 596:	81 50       	subi	r24, 0x01	; 1
 598:	90 40       	sbci	r25, 0x00	; 0
 59a:	a0 40       	sbci	r26, 0x00	; 0
 59c:	e1 f7       	brne	.-8      	; 0x596 <main+0x6a>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <main+0x74>
 5a0:	00 00       	nop
 5a2:	ed cf       	rjmp	.-38     	; 0x57e <main+0x52>

000005a4 <_exit>:
 5a4:	f8 94       	cli

000005a6 <__stop_program>:
 5a6:	ff cf       	rjmp	.-2      	; 0x5a6 <__stop_program>
